import socketio
import threading
import time
from collections import defaultdict

# Config
SERVER_URL = 'http://127.0.0.1:5001'
DURATION = 60  # ch·∫°y trong 60 gi√¢y

# Th·ªëng k√™
success_count = 0
lock = threading.Lock()
per_second_counter = defaultdict(int)

sample_data = {
    "data": [{
        "id": "7521631307152084231_3",
        "topic_name": "Vinamilk",
        "type": "NEWS_TOPIC",
        "topic_id": "5cd2a99d2e81050a12e5339a",
        "siteId": "7427331267015197703",
        "siteName": "baothegioisua",
        "title": "Vinamilk d√≠nh nghi v·∫•n l·ª´a ƒë·∫£o c·ªông t√°c vi√™n qua app nh·∫≠p li·ªáu",
        "content": "Nhi·ªÅu ng∆∞·ªùi ph·∫£n √°nh b·ªã treo ti·ªÅn, kh√¥ng ho√†n ti·ªÅn khi l√†m c·ªông t√°c vi√™n qua n·ªÅn t·∫£ng app ƒë∆∞·ª£c cho l√† c·ªßa Vinamilk. M·ªôt s·ªë nghi ng·ªù ƒë√¢y l√† h√¨nh th·ª©c l·ª´a ƒë·∫£o tinh vi.",
        "description": "",
        "is_kol": False,
        "total_interactions": 57
    }]
}

def send_and_track():
    global success_count
    sio = socketio.Client()

    def on_result(data):
        nonlocal sio
        ts = int(time.time())
        with lock:
            success_count += 1
            per_second_counter[ts] += 1
        sio.disconnect()

    try:
        sio.on('result', on_result)
        sio.connect(SERVER_URL)
        sio.emit('predict', sample_data)
        sio.wait()
    except Exception as e:
        print(f"üö® Error: {e}")

def run_test():
    print(f"üöÄ Start stress test for {DURATION} seconds...\n")
    start_time = time.time()
    end_time = start_time + DURATION

    def spam_requests():
        while time.time() < end_time:
            threading.Thread(target=send_and_track).start()

    spam_thread = threading.Thread(target=spam_requests)
    spam_thread.start()
    spam_thread.join()

    # ƒê·ª£i th√™m v√†i gi√¢y cho c√°c request x·ª≠ l√Ω xong
    time.sleep(5)

    # T·ªïng k·∫øt
    print(f"\n‚úÖ Total successful requests in {DURATION}s: {success_count}")
    print("üìä Requests per second:")
    for sec in sorted(per_second_counter):
        print(f"  üïí {time.strftime('%H:%M:%S', time.localtime(sec))}: {per_second_counter[sec]}")

if __name__ == '__main__':
    run_test()
