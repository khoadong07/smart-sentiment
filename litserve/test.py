import socketio
import time
import threading
from concurrent.futures import ThreadPoolExecutor
from collections import defaultdict

SERVER_URL = 'http://127.0.0.1:5001'
MAX_CONCURRENCY = 500  # gi·ªõi h·∫°n socket m·ªü ƒë·ªìng th·ªùi
TEST_DURATION = 60  # gi√¢y

# Th·ªëng k√™
success_count = 0
fail_count = 0
per_second_counter = defaultdict(int)
lock = threading.Lock()

sample_data = {
    "data": [{
        "id": "7521631307152084231_3",
        "topic_name": "Vinamilk",
        "type": "NEWS_TOPIC",
        "topic_id": "5cd2a99d2e81050a12e5339a",
        "siteId": "7427331267015197703",
        "siteName": "baothegioisua",
        "title": "Vinamilk d√≠nh nghi v·∫•n l·ª´a ƒë·∫£o c·ªông t√°c vi√™n qua app nh·∫≠p li·ªáu",
        "content": "Nhi·ªÅu ng∆∞·ªùi ph·∫£n √°nh b·ªã treo ti·ªÅn, kh√¥ng ho√†n ti·ªÅn khi l√†m c·ªông t√°c vi√™n qua n·ªÅn t·∫£ng app ƒë∆∞·ª£c cho l√† c·ªßa Vinamilk. M·ªôt s·ªë nghi ng·ªù ƒë√¢y l√† h√¨nh th·ª©c l·ª´a ƒë·∫£o tinh vi.",
        "description": "",
        "is_kol": False,
        "total_interactions": 57
    }]
}

def send_request():
    global success_count, fail_count
    sio = socketio.Client()

    def on_result(data):
        nonlocal sio
        ts = int(time.time())
        with lock:
            success_count += 1
            per_second_counter[ts] += 1
        sio.disconnect()

    try:
        sio.on('result', on_result)
        sio.connect(SERVER_URL)
        sio.emit('predict', sample_data)
        sio.wait()
    except Exception as e:
        with lock:
            fail_count += 1
        try:
            sio.disconnect()
        except:
            pass

def run_test_60s():
    print(f"üöÄ Running test for {TEST_DURATION} seconds with max {MAX_CONCURRENCY} concurrent sockets...\n")
    start_time = time.time()
    end_time = start_time + TEST_DURATION

    with ThreadPoolExecutor(max_workers=MAX_CONCURRENCY) as executor:
        while time.time() < end_time:
            executor.submit(send_request)

    # Ch·ªù th√™m 5s cho c√°c request x·ª≠ l√Ω xong
    time.sleep(5)

    print(f"\n‚úÖ Total success in {TEST_DURATION} seconds: {success_count}")
    print(f"‚ùå Total failed: {fail_count}")
    print("üìä Requests per second:")
    for sec in sorted(per_second_counter):
        print(f"  üïí {time.strftime('%H:%M:%S', time.localtime(sec))}: {per_second_counter[sec]}")

if __name__ == '__main__':
    run_test_60s()
